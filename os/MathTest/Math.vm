function Math.init 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
push argument 0
sub
return
label IF_FALSE0
push argument 0
return
function Math.multiply 1
label WHILE_EXP0
push argument 1
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.divide 1
push constant 0
pop local 0
label WHILE_EXP0
push argument 0
push argument 1
sub
push constant 1
neg
gt
not
if-goto WHILE_END0
push argument 0
push argument 1
sub
pop argument 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.min 0
push argument 1
push argument 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
label IF_FALSE0
push argument 0
return
function Math.max 0
push argument 1
push argument 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
label IF_FALSE0
push argument 0
return
function Math.sqrt 3
push constant 0
pop local 0
push argument 0
push constant 1
add
pop local 2
label WHILE_EXP0
push local 2
push local 0
sub
push constant 1
gt
not
if-goto WHILE_END0
push local 0
push local 2
add
push constant 2
call Math.divide 2
pop local 1
push local 1
push local 1
call Math.power 2
push argument 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
pop local 0
goto IF_END0
label IF_FALSE0
push local 1
push local 1
call Math.power 2
push argument 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
pop local 0
goto IF_END1
label IF_FALSE1
push local 1
pop local 2
label IF_END1
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.power 0
push argument 0
push argument 1
call Math.multiply 2
return
